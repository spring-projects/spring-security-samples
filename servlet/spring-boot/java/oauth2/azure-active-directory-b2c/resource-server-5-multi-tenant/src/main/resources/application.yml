server:
  port: 8095

# Select your instance under `Applications` from portal, Fill in `${validate-audience}` from `Application ID`.
validateAudience: ${validate-audience}

# From **Azure AD B2C** portal `App registrations` blade, select **Endpoints**, Access `Azure AD B2C OpenID Connect metadata document`(Global cloud format may looks like
#`https://{your-tenant-name}.b2clogin.com/{your-tenant-name}.onmicrosoft.com/<policy-name>/v2.0/.well-known/openid-configuration`,
# China Cloud looks like `https://{your-tenant-name}.b2clogin.cn/{your-tenant-name}.partner.onmschina.cn/<policy-name>/v2.0/.well-known/openid-configuration`) replace <policy-name> with your user flow name.
tenantOne:
  # You can find your `jwks_uri` from the result page of Azure AD B2C OpenID Connect metadata document
  jwkSetUri: ${your-jwk-set-uri}
  # You can find your `issuer` from the result page of Azure AD B2C OpenID Connect metadata document
  issuerUri: ${your-issuer-uri}

# Now B2C don't support client_credential, but we can use AAD point to realize this function.
# From **Azure AD B2C** portal `App registrations` blade, select **Endpoints**, Access `Azure AD OpenID Connect metadata document`(Global cloud format may looks like
#`https://login.microsoftonline.com/${your-tenant-id}/v2.0/.well-known/openid-configuration`,
# China Cloud looks like `https://login.chinacloudapi.cn/${your-tenant-id}/v2.0/.well-known/openid-configuration`) replace <policy-name> with your user flow name.
tenantTwo:
  # You can find your `jwks_uri` from the result page of Azure AD OpenID Connect metadata document
  jwkSetUri: ${your-AAD-jwk-set-uri}
  # You can find your `issuer` from the result page of Azure AD OpenID Connect metadata document
  issuerUri: ${your-AAD-issuer-uri}